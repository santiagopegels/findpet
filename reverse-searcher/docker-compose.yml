version: '3.8'

services:
  # ================================
  # Servidor Principal Reverse Searcher
  # ================================
  reverse-searcher:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: findog-reverse-searcher
    ports:
      - "5000:5000"
    environment:
      # API Configuration
      API_KEY: ${API_KEY:-secure-test-key-change-in-production}
      HOST: 0.0.0.0
      PORT: 5000
      DEBUG: ${DEBUG:-false}
      
      # Model Configuration
      MODEL_TYPE: ${MODEL_TYPE:-efficientnet}
      MODEL_PATH: ./models/
      
      # Image Processing
      MAX_IMAGE_SIZE: ${MAX_IMAGE_SIZE:-10485760}
      MAX_SEARCH_RESULTS: ${MAX_SEARCH_RESULTS:-20}
      SIMILARITY_THRESHOLD: ${SIMILARITY_THRESHOLD:-0.8}
      
      # Redis Configuration
      REDIS_ENABLED: ${REDIS_ENABLED:-true}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      
      # TensorFlow Configuration
      TF_CPP_MIN_LOG_LEVEL: "2"
      TF_FORCE_CPU: "true"
    volumes:
      # Persistir imágenes y características
      - ./images:/app/images
      - ./features:/app/features
      - ./models:/app/models
      - ./logs:/app/logs
      
      # Para desarrollo: montar código fuente (comentar en producción)
      # - .:/app
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - findog-network

  # ================================
  # Redis para Caching
  # ================================
  redis:
    image: redis:7-alpine
    container_name: findog-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - findog-network

  # ================================
  # Servicio de Testing/Demo (Opcional)
  # ================================
  test-client:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: findog-test-client
    environment:
      REVERSE_SEARCHER_URL: http://reverse-searcher:5000
      API_KEY: ${API_KEY:-secure-test-key-change-in-production}
    volumes:
      - ./test-images:/app/test-images
      - ./test-results:/app/test-results
    depends_on:
      - reverse-searcher
    profiles:
      - testing
    networks:
      - findog-network

  # ================================
  # Monitoring (Opcional)
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: findog-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring
    networks:
      - findog-network

  grafana:
    image: grafana/grafana:latest
    container_name: findog-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
    profiles:
      - monitoring
    networks:
      - findog-network

# ================================
# Volúmenes Persistentes
# ================================
volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# ================================
# Red (usar red por defecto de Docker Compose)
# ================================
networks:
  findog-network:
    driver: bridge 